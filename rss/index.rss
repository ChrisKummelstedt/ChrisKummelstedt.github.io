<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Trivselministeriet</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Tue, 22 Mar 2016 19:50:12 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Ruby-Kickstart.Takeaways</title><description>&lt;h2&gt;Helpful hints&lt;/h2&gt;  

&lt;p&gt;This post collects everything that I needed to look up during week 2 of Makers Academy. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2 Float that integer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want a value in float form (i.e. not an integer) you can manipulate it with a float:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X == 2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;X / 1.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return X&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/basicruby-cheatsheet/</link><guid isPermaLink="false">bda5c06b-c93b-4038-985b-27140e70f9ec</guid><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Tue, 22 Mar 2016 16:12:48 GMT</pubDate><content:encoded>&lt;h2&gt;Helpful hints&lt;/h2&gt;  

&lt;p&gt;This post collects everything that I needed to look up during week 2 of Makers Academy. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2 Float that integer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want a value in float form (i.e. not an integer) you can manipulate it with a float:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X == 2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;X / 1.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return X&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Will return 1.0 (rather than 1) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.3 Equal sign sillyness&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In logical statements you need to use &lt;code&gt;==&lt;/code&gt; - not just &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.5 Subing parts of a string&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyArray = MyString.split(" ")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Turning a string into an array by splitting it at " " (spaces)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyArray.join(" ")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Turning an array into string by adding " " (spaces) between elements. &lt;/p&gt;

&lt;p&gt;The correct answer uses &lt;code&gt;string.gsub('old', 'new')&lt;/code&gt;. As I forgot about this useful tool I did this &lt;em&gt;strange&lt;/em&gt; thing - first I had some problems changing the array elements to happy/Happy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;happyString.each do |ss|  
if ss == "sad"  
ss = "Happy"  
elsif ss == "Sad"  
ss = "Happy"  
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then I realised that I was using the wrong method, &lt;code&gt;.collect!&lt;/code&gt; does the trick though:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def add_more_ruby(string)

    happyString = string.split(" ")

    happyString.collect! { |element| (element == "sad") ? "happy" : element}
    happyString.collect! { |element| (element == "Sad") ? "Happy" : element}

    doneString = happyString.join(" ")

    puts doneString


end

add_more_ruby("The clowns were sad.")  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.collect!&lt;/code&gt; works like this:&lt;/p&gt;

&lt;p&gt;array.collect! {|variable| block } -&gt; a new array that has been processed through block. In the above the block is (element == "sad") ? "happy" : element}. i.e. it asks if the array element is equal to sad, and if it is, it is changed to happy. &lt;/p&gt;

&lt;p&gt;At this point i started to cry real crocodile tears because even after all this odyssey the happy string did not do something magical and clever with period. Hence, back to &lt;code&gt;.gsub&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string.gsub("sad", "happy").gsub("Sad", "Happy")  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rake loved it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.6 More string glory&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;My solution (with sage advice from Omar):  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def odds_and_evens(string, return_odds)  
    result = []
    if return_odds
        string.split("").each_with_index { |v, i| result &amp;lt;&amp;lt; v if i.odd?}
    else
        string.split("").each_with_index { |v, i| result &amp;lt;&amp;lt; v if i.even?}
    end

    result.join("") 
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i.e. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define function  &lt;/li&gt;
&lt;li&gt;Create empty array (called results)  &lt;/li&gt;
&lt;li&gt;If return odd is true we will split the string into an array, then we will do something nice to each element and add an index  &lt;/li&gt;
&lt;li&gt;We add the value (v) to the empty array called results if index (i) is even  &lt;/li&gt;
&lt;li&gt;Then we finish by joining the array, as this is the last thing in the method, this is what it will return. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Makers Academy's solution is much shorter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def odds_and_evens(string, return_odds)  
  to_return = ""
  string.size.times do |index|
    next if return_odds &amp;amp;&amp;amp; index.even?
    next if !return_odds &amp;amp;&amp;amp; index.odd?
    to_return &amp;lt;&amp;lt; string[index]
  end
  to_return
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Define function  &lt;/li&gt;
&lt;li&gt;Create an empty string  &lt;/li&gt;
&lt;li&gt;(HAWT!) string.size.times checks how many characters it has and then performs something cool that amount of times  &lt;/li&gt;
&lt;li&gt;Do |index| &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1.7 Pesky nills in my string&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, I thought this was pretty cool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def pirates_say_arrrrrrrrr(string)  
    piratespeak = ""

    string.split("").each_with_index {|v, i| piratespeak &amp;lt;&amp;lt; string[i+1] if v == "r" || v == "R"}            

    return piratespeak
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rake did not agree with me. The problem: when you feed it a string where r is at the end, it tries to include nil in the string - giving me this rake error: " no implicit conversion of nil into String". &lt;/p&gt;

&lt;p&gt;How then to fix it? Maybe we could do something adding another precondition that i+1 must be smaller than string size?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def pirates_say_arrrrrrrrr(string)  
    piratespeak = ""

    string.split("").each_with_index {|v, i| piratespeak &amp;lt;&amp;lt; string[i+1] if  i+1 &amp;lt; string.size &amp;amp;&amp;amp; v == "r" || v == "R" }         

    return piratespeak
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes! it worked. But! its not as cool as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def pirates_say_arrrrrrrrr(string)  
  to_return = ""
  add_next = false
  string.size.times do |index|
    current_char = string[index,1] # the second param here tells it to get a str of length 1.

    to_return &amp;lt;&amp;lt; current_char if add_next
    add_next = (current_char == "r" || current_char == "R")
  end
  to_return
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the makers masters do the following awesomness:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the function  &lt;/li&gt;
&lt;li&gt;Create a new empty string  &lt;/li&gt;
&lt;li&gt;Define the add_next variable and set it to false  &lt;/li&gt;
&lt;li&gt;Create a iterator dealing with index that will run for the length of the string &lt;br&gt;
4a. Define current character as a string, one in length &lt;br&gt;
4b. Add the current character to the empty string to be returned after loop IF add next is true &lt;br&gt;
4c. Then! The geniusness comes into our lives, and boy, what genius it is. As this is a loop they now set check if the current character is r or R. If it is the next time the loop is run and we are back on step 4b, it will add it if the last character was r.  &lt;/li&gt;
&lt;li&gt;Then they just return the now filled string. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voila! What glory! &lt;/p&gt;

&lt;p&gt;However, I am not sure that is better than mine? Turns out it is: runs 0.00002 seconds faster. Bet it is because I check to make sure i + 1 is not longer than the full string each time a character is checked. &lt;/p&gt;</content:encoded></item><item><title>Markdown.Cheatsheet</title><description>&lt;p&gt;This is the most basic, awesome little language I have encountered. Some, few, things are not that intuitive however:&lt;/p&gt;

&lt;p&gt;Create a code block by four spaces or ```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;``` Code ```  
&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/markdown-cheatsheet/</link><guid isPermaLink="false">baa2ea2d-4352-434f-9057-1a3a4ab5cb57</guid><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Tue, 22 Mar 2016 15:38:01 GMT</pubDate><content:encoded>&lt;p&gt;This is the most basic, awesome little language I have encountered. Some, few, things are not that intuitive however:&lt;/p&gt;

&lt;p&gt;Create a code block by four spaces or ```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;``` Code ```  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Week 2: Ruby.Huzzah</title><description>&lt;p&gt;Heading to Uganda, it's 6 am:&lt;/p&gt;

&lt;p&gt;Reviewing command-line and version control this morning, one thing is clear - the BIG MO is here. MO MENTUM. Is it not marvelous with progress? Makes you feel that others things are possible as well. &lt;/p&gt;

&lt;p&gt;I now know enough to use a blog on&lt;/p&gt;</description><link>http://localhost:2368/week-2-ruby-huzzah/</link><guid isPermaLink="false">631bdb6d-3b63-4969-a968-46ce3af4053b</guid><category>Life</category><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Mon, 21 Mar 2016 06:55:37 GMT</pubDate><content:encoded>&lt;p&gt;Heading to Uganda, it's 6 am:&lt;/p&gt;

&lt;p&gt;Reviewing command-line and version control this morning, one thing is clear - the BIG MO is here. MO MENTUM. Is it not marvelous with progress? Makes you feel that others things are possible as well. &lt;/p&gt;

&lt;p&gt;I now know enough to use a blog on localhost:2368 to create static pages and push them to github using commandline - all terms I had no idea about a week ago. &lt;br&gt;
&lt;img src="http://localhost:2368/content/images/2016/03/IMG_1694.jpg" alt="Week 2"&gt;&lt;/p&gt;</content:encoded></item><item><title>VersionControl.Cheatsheet</title><description>&lt;p&gt;&lt;strong&gt;Check if you have git&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git --version&lt;/code&gt;  Check version&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configure git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global user.name "your name"&lt;/code&gt;
Configure username&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global user.email "your email"&lt;/code&gt;        Configure email&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global core.autocrlf input&lt;/code&gt;            Configure ??&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global core.safecrlf true&lt;/code&gt;            Configure ??&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up a git repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir gitDir&lt;/code&gt;&lt;/p&gt;</description><link>http://localhost:2368/versioncontrol-cheatsheet/</link><guid isPermaLink="false">80ec40a1-b258-47af-90e4-c65c6534120b</guid><category>Cheatsheets</category><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Mon, 21 Mar 2016 05:39:42 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;Check if you have git&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git --version&lt;/code&gt;  Check version&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configure git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global user.name "your name"&lt;/code&gt;
Configure username&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global user.email "your email"&lt;/code&gt;        Configure email&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global core.autocrlf input&lt;/code&gt;            Configure ??&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global core.safecrlf true&lt;/code&gt;            Configure ??&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up a git repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir gitDir&lt;/code&gt; Create a new directory        &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd gitDir&lt;/code&gt;Change into it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo "Git is Awesome" &amp;gt; gitText&lt;/code&gt; Create a file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;  Changes current directory to git repo &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Git repo&lt;/code&gt; - creates a hidden directory that tracks changes to files in the directory.&lt;/p&gt;

&lt;p&gt;NB! You should run git init inside the directory where the files for the project you're placing under version control are. &lt;/p&gt;

&lt;p&gt;If you do it somewhere else you can use (rm -rf .git = remove recursively, without prompting) to remove it. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add gitText&lt;/code&gt;  Adds file to staging area&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm gitText&lt;/code&gt;   Removes a file from staging area&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "First commit"&lt;/code&gt; Commit all files in staging area&lt;/p&gt;

&lt;p&gt;Example of success:&lt;/p&gt;

&lt;p&gt;$ git commit -m "First commit"
[master (root-commit) a1833e4] First commit
1 file changed, 1 insertion(+) &lt;br&gt;
create mode 100644 gitText&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;
Gives overview of what happened since last time&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; shows a logg&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout a1833e4ef4a1b&lt;/code&gt; change back to commit with hash &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;  go back to current master&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connecting computer with Github repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add a SSH key: &lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create repo using interface &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;
Check if you have any remotes (connections between a local repo and a github repo) &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin NEWREPOURL&lt;/code&gt; 
Add remote &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Git push -u origin master&lt;/code&gt;
Push master to origin and make it the default action of git push (-u)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote rm origin&lt;/code&gt; 
Removing a remote&lt;/p&gt;</content:encoded></item><item><title>CommandLine.Cheatsheet</title><description>&lt;p&gt;This is a cheatsheet for basic command line stuff learned in week one of Makers Academy's pre-course.&lt;/p&gt;

&lt;h2&gt;Terminal terminology&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;br&gt;
Pipe/Redirect stream &lt;br&gt;
&lt;strong&gt;stdin&lt;/strong&gt; &lt;br&gt;
Standard stream in &lt;br&gt;
&lt;strong&gt;stdout&lt;/strong&gt; &lt;br&gt;
Standard stream out &lt;br&gt;
&lt;strong&gt;stderr&lt;/strong&gt; &lt;br&gt;
Standard error &lt;/p&gt;

&lt;h2&gt;General Terminal commands&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt;  Lists directory content&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls –l –A&lt;/code&gt;  Using two switches (L for long format&lt;/p&gt;</description><link>http://localhost:2368/terminal-cheatsheet/</link><guid isPermaLink="false">98775f9e-cb15-4029-a855-33744811631b</guid><category>Cheatsheets</category><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Sun, 20 Mar 2016 17:27:31 GMT</pubDate><content:encoded>&lt;p&gt;This is a cheatsheet for basic command line stuff learned in week one of Makers Academy's pre-course.&lt;/p&gt;

&lt;h2&gt;Terminal terminology&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;br&gt;
Pipe/Redirect stream &lt;br&gt;
&lt;strong&gt;stdin&lt;/strong&gt; &lt;br&gt;
Standard stream in &lt;br&gt;
&lt;strong&gt;stdout&lt;/strong&gt; &lt;br&gt;
Standard stream out &lt;br&gt;
&lt;strong&gt;stderr&lt;/strong&gt; &lt;br&gt;
Standard error &lt;/p&gt;

&lt;h2&gt;General Terminal commands&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt;  Lists directory content&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls –l –A&lt;/code&gt;  Using two switches (L for long format and A for all files hidden files are part of it)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd ~/…&lt;/code&gt;  Changes folder&lt;/p&gt;

&lt;p&gt;&lt;code&gt;whoami&lt;/code&gt;  Identifies user&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wc&lt;/code&gt;  Counts lines, words and characters &lt;/p&gt;

&lt;p&gt;&lt;code&gt;date&lt;/code&gt;  Prints date&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; Print working directory (shows path to current folder) &lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch NAME&lt;/code&gt; Create a new file with NAME &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir NAME&lt;/code&gt; Create a new folder with NAME&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rmdir NAME&lt;/code&gt; Delete a folder with NAME &lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm NAME&lt;/code&gt; delete a file with NAME &lt;em&gt;use with caution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm –r DIRECTORY&lt;/code&gt; -r (recursively) remove DIRECTORY &lt;/p&gt;

&lt;p&gt;&lt;code&gt;head -n 20 file&lt;/code&gt;  top 20 rows&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm –i&lt;/code&gt;  -i (interactively), i.e. it will ask for each file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm –f&lt;/code&gt;  -f (forced) even write protected files will burn &lt;em&gt;use with caution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cp OLD NEW&lt;/code&gt;  create copy OLD file as NEW file &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mv NAME ../&lt;/code&gt;  move file NAME to folder&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat&lt;/code&gt;  concatenate i.e. combine &lt;/p&gt;

&lt;p&gt;&lt;code&gt;/private/var/log/system.log&lt;/code&gt;  what happened?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;man ls&lt;/code&gt; brings up the manual for ls&lt;/p&gt;

&lt;h2&gt;Combining terminal commands&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;find . -name "*.txt" –print&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;find all files, starting with the current directory, with any name that ends in .txt and print it to the screen&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep WORD *txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Search all *txt files and print all that contain WORD&lt;/p&gt;

&lt;p&gt;&lt;code&gt;|&lt;/code&gt;    &lt;/p&gt;

&lt;p&gt;Redirect stream    &lt;/p&gt;

&lt;p&gt;&lt;code&gt;find . -name "*.txt" –print | grep WORD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Find all files, starting with the current directory, with any name that ends that .txt and redirect this stream to grep, grep should in turn display any pwd/file that contains word &lt;/p&gt;

&lt;p&gt;&lt;code&gt;find . -name "*.txt" –print &amp;gt; list.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Find all files, starting with the current directory, with any name that ends that .txt and create a new file containing this stream, called list.txt&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find ~ -name "*.txt" -print | grep README | wc –l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Find all files, starting with the current directory, with any name that ends that .txt, then check which of those contain the word README, then display how many lines (giving us how many files) &lt;/p&gt;

&lt;h2&gt;Permissions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Types:&lt;/strong&gt; Read, Write, Execute
&lt;strong&gt;Class:&lt;/strong&gt; User, Group, Others &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls –l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can view this using long format&lt;/p&gt;

&lt;p&gt;This presents the info on permission in the following way &lt;/p&gt;

&lt;p&gt;USER (RWX) – GROUP (RWX) – OTHERS (RWX)&lt;/p&gt;

&lt;p&gt;Changing permissions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chmod u+w readme.txt&lt;/code&gt;  gives reading permissions to users&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whoami&lt;/code&gt;  gives user&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Stuff to do with interpreters, paths, env and processes&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Which ruby&lt;/code&gt; Gives path to ruby interpreter&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!&lt;/code&gt;
Shebang; tells computer what interpreter to use &lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt; Loads the right interpreter for ruby&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo $HOME&lt;/code&gt; Gives my home directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo $PATH&lt;/code&gt; Gives a colon separated list of places the computer will look for programs. &lt;/p&gt;

&lt;p&gt;*NB! All programs that don’t require a shebang, or alternative with similar function, live in a folder specified by path
*&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Env&lt;/code&gt; Show all key-value pairs in environment &lt;/p&gt;

&lt;p&gt;&lt;code&gt;export KEY=Value&lt;/code&gt; Set new pair in current terminal session&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo $KEY&lt;/code&gt;  Echo’s value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export PATH=$PATH:/Users/fluff&lt;/code&gt;  Add another path directory &lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo "export SEASON=winter" &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt; if you want to keep KV pair in your profile (keep permanently)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB! &gt;&gt; means append.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ps&lt;/code&gt;  processes currently doing something in terminal&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ps x&lt;/code&gt;  all processes (in all windows)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ps x | grep BASH&lt;/code&gt;  all processes (in all windows) involving BASH&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ps x | grep BASH | wc -l&lt;/code&gt;  makes a list of all processes (in all windows) involving BASH and then counts how many lines are on that list (i.e. how many such processes there are)&lt;/p&gt;

&lt;h2&gt;Basic VIM&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;vi myFile&lt;/code&gt;  create file
&lt;code&gt;i&lt;/code&gt; start inputting before cursor
&lt;code&gt;o&lt;/code&gt; open a new line after the current one
&lt;code&gt;dd&lt;/code&gt;  delete current line and dozens of others&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;how to edit in VIM&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; (input)  &lt;/li&gt;
&lt;li&gt;insert stuff  &lt;/li&gt;
&lt;li&gt;press esc  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; (write)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; (quit)  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; (quit without saving) &lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title>Ghost.Cheatsheet</title><description>&lt;p&gt;This is a cheatsheet for the blog CMS ghost to help you get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brew install node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew install python&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew install wget&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install buster&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Start a session&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update blog&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buster generate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buster deploy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For full: &lt;br&gt;
&lt;a href="http://usmanjamil.co.uk/blog/setting-up-a-ghost-blog-on-github/#blog"&gt;http://usmanjamil.co.uk/blog/setting-up-a-ghost-blog-on-github/#blog&lt;/a&gt;&lt;/p&gt;</description><link>http://localhost:2368/using-ghost/</link><guid isPermaLink="false">62ec1bd5-14a3-44ee-b55f-9e973beb67c3</guid><category>Cheatsheets</category><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Sun, 20 Mar 2016 16:21:34 GMT</pubDate><content:encoded>&lt;p&gt;This is a cheatsheet for the blog CMS ghost to help you get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brew install node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew install python&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew install wget&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install buster&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Start a session&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update blog&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buster generate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buster deploy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For full: &lt;br&gt;
&lt;a href="http://usmanjamil.co.uk/blog/setting-up-a-ghost-blog-on-github/#blog"&gt;http://usmanjamil.co.uk/blog/setting-up-a-ghost-blog-on-github/#blog&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Week 1: Adventure.Begin</title><description>&lt;p&gt;First week was about command line and version control.&lt;/p&gt;

&lt;p&gt;After one month of Ruby and one week of the pre-course, the world may not ever be the same again. Can't wait to rush in, but before I can fully commit, I need to finish at Global Business Labs - the&lt;/p&gt;</description><link>http://localhost:2368/it-has-begun/</link><guid isPermaLink="false">f34f6be6-a988-41b3-8300-92a157028bcc</guid><category>Life</category><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Sun, 20 Mar 2016 15:59:56 GMT</pubDate><content:encoded>&lt;p&gt;First week was about command line and version control.&lt;/p&gt;

&lt;p&gt;After one month of Ruby and one week of the pre-course, the world may not ever be the same again. Can't wait to rush in, but before I can fully commit, I need to finish at Global Business Labs - the NGO I am currently working for.  &lt;/p&gt;

&lt;p&gt;One week in Uganda and then I am going all into this new fab coding adventure. &lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;br&gt;
&lt;img src="http://localhost:2368/content/images/2016/03/afafa.JPG" alt="Thumbs up"&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt; &lt;br&gt;
Huzzah! &lt;/p&gt;</content:encoded></item><item><title>Whoami</title><description>&lt;p&gt;Hello World, and welcome to a blog clearly lacking any gravitas!&lt;/p&gt;

&lt;p&gt;This gravitas thing is an allusion to "The Culture Novels" by Ian M. Banks, a modern god of sci-fi. What makes his books so delicious is that he has a stellar command of basic assumptions. He &lt;em&gt;really&lt;/em&gt; gets culture:&lt;/p&gt;</description><link>http://localhost:2368/whoami/</link><guid isPermaLink="false">cfa8d0ab-08f9-4a08-973f-5ad52e33f4cc</guid><dc:creator>Christopher Kummelstedt</dc:creator><pubDate>Sat, 12 Mar 2016 18:02:00 GMT</pubDate><content:encoded>&lt;p&gt;Hello World, and welcome to a blog clearly lacking any gravitas!&lt;/p&gt;

&lt;p&gt;This gravitas thing is an allusion to "The Culture Novels" by Ian M. Banks, a modern god of sci-fi. What makes his books so delicious is that he has a stellar command of basic assumptions. He &lt;em&gt;really&lt;/em&gt; gets culture: gets our OS, and can play with it, substituting our basic components for alien ones. If I were to describe the magnificent milieus of his imagination with one word it would be "coherence". &lt;/p&gt;

&lt;p&gt;Why introduce myself with this? Because what we find beautiful is a very good reflection our own lens on reality. I, like most people, am drawn to the coherent, with a special penchant for the lasting/just. I just love this quote by an Irish Poet called Donaugh: "Sustainability is the heart of things that make them beautiful". Yes it is Mr. Poet! Yes it is.  In a world that is always changing, it is the momentarily lasting that is most worthy of note. This is the heart of justice. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In my spare time I do this:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;I watch things, I code and I build strange art with friends.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*In my work I do this:&lt;/em&gt;2*&lt;/p&gt;

&lt;p&gt;Mostly emails: I work with accelerators in Uganda, Botswana and Namibia, as an operations manager for a Swedish NGO. But what I really want to do is to create a social venture together with friends. It will probably entail some of these idea fragments: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making it easier to form collectives&lt;/li&gt;
&lt;li&gt;Making it easier to overcome the 'tragedy of the commons'&lt;/li&gt;
&lt;li&gt;Making it easier to achieve consensus &lt;/li&gt;
&lt;li&gt;Making "corrupted" value chains obsolete &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>